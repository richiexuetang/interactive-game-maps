generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

generator dbml {
  provider = "prisma-dbml-generator"
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [pg_trgm, postgis]
}

model User {
  id           String       @id @default(uuid())
  email        String       @unique @db.Text
  picture      String?      @db.Text
  password     String?      @db.Text
  username     String?
  hideFound    Boolean      @default(false)
  noteMarkers  NoteMarker[]
  foundMarkers Location[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model NoteMarker {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  latitude    Decimal
  longitude   Decimal
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userEmail   String
  user        User     @relation(fields: [userEmail], references: [email])
  mapSlug     String
  map         Map      @relation(fields: [mapSlug], references: [slug])
}

model Game {
  id             Int              @id @default(autoincrement())
  slug           String           @unique
  title          String
  groups         Group[]
  maps           Map[]
  ChecklistGuide ChecklistGuide[]
}

model Map {
  id         Int          @id @default(autoincrement())
  slug       String       @unique
  title      String
  gameSlug   String
  order      Int          @default(1)
  locations  Location[]
  game       Game         @relation(fields: [gameSlug], references: [slug])
  regions    Region[]
  NoteMarker NoteMarker[]
  minZoom    Int          @default(9)
  maxZoom    Int          @default(14)
  zoom       Int          @default(10)
  center     Decimal[]    @default([0, 0])
}

model Region {
  id          Int                      @id @default(autoincrement())
  coordinates Unsupported("geometry")?
  title       String
  mapSlug     String
  map         Map                      @relation(fields: [mapSlug], references: [slug])
  centerX     Decimal?
  centerY     Decimal?

  @@index([coordinates], type: Gist)
}

model Group {
  id         Int        @id @default(autoincrement())
  title      String
  categories Category[]
  gameSlug   String
  game       Game       @relation(fields: [gameSlug], references: [slug])
  expandable Boolean    @default(false)
}

model Category {
  id              Int              @id @default(autoincrement())
  title           String
  icon            String
  info            String?
  groupId         Int?
  group           Group?           @relation(fields: [groupId], references: [id])
  locations       Location[]
  isChecklist     Boolean          @default(false)
  defaultHidden   Boolean          @default(false)
  checklistGuides ChecklistGuide[]
}

model Location {
  id          Int          @id @default(autoincrement())
  title       String
  description String?
  latitude    Decimal
  longitude   Decimal
  categoryId  Int?
  category    Category?    @relation(fields: [categoryId], references: [id])
  map         Map          @relation(fields: [mapSlug], references: [slug])
  mapSlug     String
  media       Media[]
  type        LocationType @default(MARKER)
  users       User[]
}

enum LocationType {
  MARKER
  TEXT
}

model Media {
  id         Int       @id @default(autoincrement())
  url        String
  type       String
  locationId Int?
  location   Location? @relation(fields: [locationId], references: [id])
}

model ChecklistGuide {
  id         Int        @id @default(autoincrement())
  title      String
  categories Category[]
  gameSlug   String
  game       Game       @relation(fields: [gameSlug], references: [slug])
}
