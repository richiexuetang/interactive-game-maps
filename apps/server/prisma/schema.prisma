generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

generator dbml {
  provider = "prisma-dbml-generator"
}

datasource db {
  provider   = "postgresql"
  url        = env("POSTGRES_PRISMA_URL")
  extensions = [pg_trgm, postgis]
}

model AppUser {
  id             String       @id @default(cuid())
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  email          String       @unique
  firstName      String?
  lastName       String?
  photoUrl       String?
  foundLocations Int[]
  username       String?
  hideFound      Boolean      @default(false)
  noteMarkers    NoteMarker[]
}

model NoteMarker {
  id          Int     @id @default(autoincrement())
  title       String
  description String?
  latitude    Decimal
  longitude   Decimal
  userId      String
  regionSlug  String  @default("world")
  user        AppUser @relation(fields: [userId], references: [id])
}

model Game {
  id          Int           @id @default(autoincrement())
  slug        String        @unique
  title       String
  description String
  minZoom     Int
  maxZoom     Int
  zoom        Int
  center      Decimal[]
  groups      MarkerGroup[]
  regions     Region[]
}

model Region {
  id           Int              @id @default(autoincrement())
  slug         String           @unique
  title        String
  thumbnailUrl String
  tilePath     String
  gameSlug     String
  order        Int              @default(1)
  locations    MarkerLocation[]
  game         Game             @relation(fields: [gameSlug], references: [slug])
  subRegions   SubRegion[]
}

model SubRegion {
  id          Int                     @id @default(autoincrement())
  regionSlug  String
  coordinates Unsupported("geometry")
  title       String
  slug        String                  @unique
  locations   MarkerLocation[]
  region      Region                  @relation(fields: [regionSlug], references: [slug])

  @@index([coordinates], type: Gist)
}

model MarkerGroup {
  id         Int              @id @default(autoincrement())
  title      String
  gameSlug   String
  categories MarkerCategory[]
  game       Game             @relation(fields: [gameSlug], references: [slug])
}

model MarkerCategory {
  id          Int              @id @default(autoincrement())
  title       String
  icon        String
  info        String?
  groupId     Int?
  markerGroup MarkerGroup?     @relation(fields: [groupId], references: [id])
  locations   MarkerLocation[]
}

model MarkerLocation {
  id            Int             @id @default(autoincrement())
  title         String
  description   String?
  latitude      Decimal
  longitude     Decimal
  categoryId    Int?
  regionSlug    String
  subRegionSlug String?
  category      MarkerCategory? @relation(fields: [categoryId], references: [id])
  region        Region          @relation(fields: [regionSlug], references: [slug])
  subRegion     SubRegion?      @relation(fields: [subRegionSlug], references: [slug])
  media         Media[]
}

model Media {
  id               Int             @id @default(autoincrement())
  url              String
  type             String
  markerLocationId Int?
  MarkerLocation   MarkerLocation? @relation(fields: [markerLocationId], references: [id])
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model spatial_ref_sys {
  srid      Int     @id
  auth_name String? @db.VarChar(256)
  auth_srid Int?
  srtext    String? @db.VarChar(2048)
  proj4text String? @db.VarChar(2048)
}
