datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

generator dbml {
  provider = "prisma-dbml-generator"
}

model User {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  email     String   @unique
  password  String
  firstName String?
  lastName  String?
  role      Role
}

enum Role {
  ADMIN
  USER
}

model AppUser {
  id                  String                @id @default(cuid())
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  email               String                @unique
  firstName           String?
  lastName            String?
  foundLocations      Int[]
  AppUsersOnLocations AppUsersOnLocations[]
}

model AppUsersOnLocations {
  user       AppUser        @relation(fields: [userId], references: [id])
  userId     String // relation scalar field (used in the `@relation` attribute above)
  location   MarkerLocation @relation(fields: [locationId], references: [id])
  locationId Int // relation scalar field (used in the `@relation` attribute above)

  @@id([userId, locationId])
}

model Game {
  id           Int           @id @default(autoincrement())
  slug         String        @unique
  title        String
  thumbnailUrl String
  logo         String?
  regions      Region[]
  groups       MarkerGroup[]
  previewUrl   String?
  iconUrl      String?
  description  String?
}

model Region {
  id           Int              @id @default(autoincrement())
  slug         String           @unique
  title        String
  thumbnailUrl String
  minZoom      Int
  maxZoom      Int
  defaultZoom  Int
  center       Decimal[]
  tilePath     String
  Game         Game?            @relation(fields: [gameSlug], references: [slug])
  gameSlug     String?
  locations    MarkerLocation[]
  subRegions   SubRegion[]
  order        Int              @default(1)
}

model SubRegion {
  id             Int     @id @default(autoincrement())
  name           String
  latitude       Decimal
  longitude      Decimal
  parentRegion   Region? @relation(fields: [parentRegionId], references: [id])
  parentRegionId Int?
}

model MarkerGroup {
  id         Int              @id @default(autoincrement())
  title      String
  slug       String           @unique
  Game       Game?            @relation(fields: [gameSlug], references: [slug])
  gameSlug   String?
  categories MarkerCategory[]
}

model MarkerCategory {
  id          Int              @id @default(autoincrement())
  title       String
  icon        String
  template    String?
  info        String?
  locations   MarkerLocation[]
  groupSlug   String
  MarkerGroup MarkerGroup?     @relation(fields: [groupSlug], references: [slug])
}

model MarkerLocation {
  id                  Int                   @id @default(autoincrement())
  title               String
  description         String?
  latitude            Decimal
  longitude           Decimal
  category            MarkerCategory?       @relation(fields: [categoryId], references: [id])
  categoryId          Int?
  Region              Region?               @relation(fields: [regionSlug], references: [slug])
  regionSlug          String?
  media               Media[]
  AppUsersOnLocations AppUsersOnLocations[]
}

model Media {
  id               Int             @id @default(autoincrement())
  title            String
  url              String
  fileName         String?
  type             String
  mimeType         String
  MarkerLocation   MarkerLocation? @relation(fields: [markerLocationId], references: [id])
  markerLocationId Int?
}
